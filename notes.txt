Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 01:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodoly:
    No powerpoints
    Handson Driven

About You:
    1. Name
    2. Total Experience
    3. Primary Skillset
    4. Experience in Golang
    5. Any specific expectations

Design Patterns
    Facade
    Composite
    Builder
    Strategy
    Factory
    Adpater

Concurrency Pattern
    Circuit Breaker

Concurrency Refresher

Http Services
    1. Platform APIs
    2. Library 
    3. Frameworks


GET http://myapp.com/products
GET http://myapp.com/products/1
POST http://myapp.com/products/
PUT http://myapp.com/products/1
DELETE http://myapp.com/products/1  

Routing

www-url-form-encoded
key=value&key=value&key=value

Middleware
    Any common logic that need to be applied for EVERY request & response 
    (e.g. logging, authentication, authorization, etc)

GRPC
    gRPC
        interservice communication
        http2
        binary
        protocol buffers
        Communication Patterns
            Request & Response
            Client Streaming (multiple requests & single response)
            Server Streaming (single request & multiple responses)
            Bidirectional Streaming (multiple requests & multiple responses)
        Support for multiple languages

    REST
        (+) http (stateless) 
            text
            JSON
            Request & Response 
            (e.g. GET, POST, PUT, DELETE)

    Tools installation

        Mac
            brew install protobuf
            brew install protoc-gen-go
            brew install protoc-gen-go-grpc

        windows:
            go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1


    Schema
        Operation?
        Input?
        Output?
        Communication Pattern?

    To generate the proxy & stub
        protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto 

    service.pb.go
        contains information to serialize and deserialize the message (payload)

To install the dependencies for grpc
    go get -u google.golang.org/grpc
    go get -u google.golang.org/protobuf/reflect/protoreflect
    go get -u google.golang.org/protobuf/runtime/protoimpl


Testing
go test ./... -v

Benchmark
    go test -bench=. -benchmem -benchtime=10s
    
Code Coverage
    go test ./... --cover
    go test ./... -coverprofile=coverage.out
    go tool cover -html=coverage.out